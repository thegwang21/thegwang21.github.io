{"version":3,"sources":["media/img/GwangIcon.png","components/RotatedGallery.jsx","components/App.js","index.js"],"names":["Component","App","className","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iRAAe,MAA0B,sCCMLA,YCMrBC,MATf,WACE,OACE,qBAAKC,UAAU,MAAf,SAEC,gDCFLC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.01b1118d.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/GwangIcon.f9cd04a0.png\";","import React, { Component, createRef } from 'react';\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport {TrackballControls} from \"three/examples/jsm/controls/TrackballControls\";\nimport * as THREE from 'three';\nimport GwangIcon from '../media/img/GwangIcon.png';\n\nexport class RotatedGallery extends Component {\n    constructor(props) {\n        super()\n        this.state = {\n        }\n        this.imgRef = React.createRef();\n        this.videoRef= React.createRef();\n        this.canvasRef = React.createRef();\n    }\n    componentDidMount() {\n        let camera, scene, renderer;\n        let video= this.videoRef.current;\n        let canvas = this.canvasRef.current;\n        const texture = new THREE.Texture(this.imgRef.current);\n        console.log(texture);\n        init();\n        animate();\n        function init() {\n            camera = new THREE.PerspectiveCamera(60, window.innerWidth / window.innerHeight, 0.1, 100);\n            camera.position.z = 0.01;\n            scene = new THREE.Scene();\n            //video = document.getElementById('video');            \n            // const texture = new THREE.VideoTexture(video);\n            // const texture = new THREE.CanvasTexture(canvas);\n            const geometry = new THREE.PlaneBufferGeometry(16, 9);\n            //const geometry = new THREE.CylinderGeometry( 5, 5, 20, 32 );\n            geometry.scale(0.5, 0.5, 0.5);\n            console.log(texture);\n            const material = new THREE.MeshBasicMaterial({ map: texture });\n            const count = 11;\n            const radius = 10;\n            // const count = 16;\n            // const radius = 32;\n            for (let i = 1, l = count; i <= l; i++) {\n\n                const phi = Math.acos(- 1 + (2 * i) / l);\n                const theta = Math.sqrt(l * Math.PI) * phi;\n\n                const mesh = new THREE.Mesh(geometry, material);\n                // mesh.position.setFromSphericalCoords(radius, phi, theta);\n                mesh.position.setFromCylindricalCoords(radius, i*36, 0);\n                mesh.lookAt(camera.position);\n                scene.add(mesh);\n            }\n            renderer = new THREE.WebGLRenderer({ antialias: true });\n            renderer.setPixelRatio(window.devicePixelRatio);\n            renderer.setSize(window.innerWidth, window.innerHeight);\n            document.body.appendChild(renderer.domElement);\n            // const controls = new OrbitControls(camera, renderer.domElement);\n            // controls.enableZoom = false;\n            // controls.enablePan = false;\n            const controls = new TrackballControls(camera, renderer.domElement);\n            window.addEventListener('resize', onWindowResize, false);\n            // if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n            //     const constraints = { video: { width: 1280, height: 720, facingMode: 'user' } };\n            //     navigator.mediaDevices.getUserMedia(constraints).then(function (stream) {\n            //         // apply the stream to the video element used in the texture\n            //         video.srcObject = stream;\n            //         video.play();\n            //     }).catch(function (error) {\n            //         console.error('Unable to access the camera/webcam.', error);\n            //     });\n            // } else {\n            //     console.error('MediaDevices interface not available.');\n            // }\n        }\n\n        function onWindowResize() {\n\n            camera.aspect = window.innerWidth / window.innerHeight;\n            camera.updateProjectionMatrix();\n\n            renderer.setSize(window.innerWidth, window.innerHeight);\n\n        }\n\n        function animate() {\n\n            requestAnimationFrame(animate);\n            renderer.render(scene, camera);\n\n        }\n    }\n    render() {\n        return (\n            <div>\n                <img style={{display:\"none\",width:\"100px\", height:\"100px\"}} ref={this.imgRef} src={GwangIcon} alt=\"gwangicone\"/>\n                {/* <canvas ref={this.canvasRef} width=\"100\" height=\"100\" src={GwangIcon}>\n                    <img src={GwangIcon} width=\"100\" height=\"100\" alt=\"gwangicone\"/>\n                </canvas> \n                video id=\"video\" ref={this.videoRef} style={{display:\"none\"}} ></video> \n                style={{display:\"none\"}} */}\n            </div>\n        )\n    }\n}\n\nexport default RotatedGallery\n","import './App.css';\nimport RotatedGallery from './RotatedGallery';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n     {/* <RotatedGallery></RotatedGallery> */}\n     <p>Dev Gwang PR</p>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}