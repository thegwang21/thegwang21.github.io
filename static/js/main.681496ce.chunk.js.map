{"version":3,"sources":["media/img/GwangIcon.png","components/RotatedGallery.jsx","components/App.js","index.js"],"names":["Component","App","className","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iRAAe,MAA0B,sCCMLA,YCMrBC,MATf,WACE,OACE,qBAAKC,UAAU,MAAf,SAEC,gDCFLC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.681496ce.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/GwangIcon.f9cd04a0.png\";","import React, { Component, createRef } from 'react';\r\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\r\nimport {TrackballControls} from \"three/examples/jsm/controls/TrackballControls\";\r\nimport * as THREE from 'three';\r\nimport GwangIcon from '../media/img/GwangIcon.png';\r\n\r\nexport class RotatedGallery extends Component {\r\n    constructor(props) {\r\n        super()\r\n        this.state = {\r\n        }\r\n        this.imgRef = React.createRef();\r\n        this.videoRef= React.createRef();\r\n        this.canvasRef = React.createRef();\r\n    }\r\n    componentDidMount() {\r\n        let camera, scene, renderer;\r\n        let video= this.videoRef.current;\r\n        let canvas = this.canvasRef.current;\r\n        const texture = new THREE.Texture(this.imgRef.current);\r\n        console.log(texture);\r\n        init();\r\n        animate();\r\n        function init() {\r\n            camera = new THREE.PerspectiveCamera(60, window.innerWidth / window.innerHeight, 0.1, 100);\r\n            camera.position.z = 0.01;\r\n            scene = new THREE.Scene();\r\n            //video = document.getElementById('video');            \r\n            // const texture = new THREE.VideoTexture(video);\r\n            // const texture = new THREE.CanvasTexture(canvas);\r\n            const geometry = new THREE.PlaneBufferGeometry(16, 9);\r\n            //const geometry = new THREE.CylinderGeometry( 5, 5, 20, 32 );\r\n            geometry.scale(0.5, 0.5, 0.5);\r\n            console.log(texture);\r\n            const material = new THREE.MeshBasicMaterial({ map: texture });\r\n            const count = 11;\r\n            const radius = 10;\r\n            // const count = 16;\r\n            // const radius = 32;\r\n            for (let i = 1, l = count; i <= l; i++) {\r\n\r\n                const phi = Math.acos(- 1 + (2 * i) / l);\r\n                const theta = Math.sqrt(l * Math.PI) * phi;\r\n\r\n                const mesh = new THREE.Mesh(geometry, material);\r\n                // mesh.position.setFromSphericalCoords(radius, phi, theta);\r\n                mesh.position.setFromCylindricalCoords(radius, i*36, 0);\r\n                mesh.lookAt(camera.position);\r\n                scene.add(mesh);\r\n            }\r\n            renderer = new THREE.WebGLRenderer({ antialias: true });\r\n            renderer.setPixelRatio(window.devicePixelRatio);\r\n            renderer.setSize(window.innerWidth, window.innerHeight);\r\n            document.body.appendChild(renderer.domElement);\r\n            // const controls = new OrbitControls(camera, renderer.domElement);\r\n            // controls.enableZoom = false;\r\n            // controls.enablePan = false;\r\n            const controls = new TrackballControls(camera, renderer.domElement);\r\n            window.addEventListener('resize', onWindowResize, false);\r\n            // if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\r\n            //     const constraints = { video: { width: 1280, height: 720, facingMode: 'user' } };\r\n            //     navigator.mediaDevices.getUserMedia(constraints).then(function (stream) {\r\n            //         // apply the stream to the video element used in the texture\r\n            //         video.srcObject = stream;\r\n            //         video.play();\r\n            //     }).catch(function (error) {\r\n            //         console.error('Unable to access the camera/webcam.', error);\r\n            //     });\r\n            // } else {\r\n            //     console.error('MediaDevices interface not available.');\r\n            // }\r\n        }\r\n\r\n        function onWindowResize() {\r\n\r\n            camera.aspect = window.innerWidth / window.innerHeight;\r\n            camera.updateProjectionMatrix();\r\n\r\n            renderer.setSize(window.innerWidth, window.innerHeight);\r\n\r\n        }\r\n\r\n        function animate() {\r\n\r\n            requestAnimationFrame(animate);\r\n            renderer.render(scene, camera);\r\n\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <img style={{display:\"none\",width:\"100px\", height:\"100px\"}} ref={this.imgRef} src={GwangIcon} alt=\"gwangicone\"/>\r\n                {/* <canvas ref={this.canvasRef} width=\"100\" height=\"100\" src={GwangIcon}>\r\n                    <img src={GwangIcon} width=\"100\" height=\"100\" alt=\"gwangicone\"/>\r\n                </canvas> \r\n                video id=\"video\" ref={this.videoRef} style={{display:\"none\"}} ></video> \r\n                style={{display:\"none\"}} */}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default RotatedGallery\r\n","import './App.css';\r\nimport RotatedGallery from './RotatedGallery';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n     {/* <RotatedGallery></RotatedGallery> */}\r\n     <p>Dev Gwang PR</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}