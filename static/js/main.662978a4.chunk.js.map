{"version":3,"sources":["media/img/GwangIcon.png","components/RotatedGallery.jsx","components/App.js","index.js"],"names":["RotatedGallery","props","state","imgRef","React","createRef","videoRef","canvasRef","this","current","camera","scene","renderer","texture","THREE","onWindowResize","aspect","window","innerWidth","innerHeight","updateProjectionMatrix","setSize","console","log","position","z","geometry","scale","material","map","i","phi","Math","acos","mesh","sqrt","PI","setFromCylindricalCoords","lookAt","add","antialias","setPixelRatio","devicePixelRatio","document","body","appendChild","domElement","TrackballControls","addEventListener","init","animate","requestAnimationFrame","render","style","display","width","height","ref","src","GwangIcon","alt","Component","App","className","ReactDOM","StrictMode","getElementById"],"mappings":"iRAAe,MAA0B,sCCuG1BA,EAjGf,kDACI,WAAYC,GAAQ,IAAD,8BACf,gBACKC,MAAQ,GAEb,EAAKC,OAASC,IAAMC,YACpB,EAAKC,SAAUF,IAAMC,YACrB,EAAKE,UAAYH,IAAMC,YANR,EADvB,gEAWmBG,KAAKF,SAASG,QACZD,KAAKD,UAAUE,QAF5B,IAAIC,EAAQC,EAAOC,EAGbC,EAAU,IAAIC,IAAcN,KAAKL,OAAOM,SAsD9C,SAASM,IAELL,EAAOM,OAASC,OAAOC,WAAaD,OAAOE,YAC3CT,EAAOU,yBAEPR,EAASS,QAAQJ,OAAOC,WAAYD,OAAOE,aA1D/CG,QAAQC,IAAIV,GAGZ,YACIH,EAAS,IAAII,IAAwB,GAAIG,OAAOC,WAAaD,OAAOE,YAAa,GAAK,MAC/EK,SAASC,EAAI,IACpBd,EAAQ,IAAIG,IAIZ,IAAMY,EAAW,IAAIZ,IAA0B,GAAI,GAEnDY,EAASC,MAAM,GAAK,GAAK,IACzBL,QAAQC,IAAIV,GAMZ,IALA,IAAMe,EAAW,IAAId,IAAwB,CAAEe,IAAKhB,IAK3CiB,EAAI,EAAcA,GAJb,GAIqBA,IAAK,CAEpC,IAAMC,EAAMC,KAAKC,KAAY,EAAIH,EANvB,GAMc,GAGlBI,GAFQF,KAAKG,KAPT,GAOkBH,KAAKI,IAEpB,IAAItB,IAAWY,EAAUE,IAEtCM,EAAKV,SAASa,yBAVH,GAUsC,GAAFP,EAAM,GACrDI,EAAKI,OAAO5B,EAAOc,UACnBb,EAAM4B,IAAIL,IAEdtB,EAAW,IAAIE,IAAoB,CAAE0B,WAAW,KACvCC,cAAcxB,OAAOyB,kBAC9B9B,EAASS,QAAQJ,OAAOC,WAAYD,OAAOE,aAC3CwB,SAASC,KAAKC,YAAYjC,EAASkC,YAIlB,IAAIC,IAAkBrC,EAAQE,EAASkC,YACxD7B,OAAO+B,iBAAiB,SAAUjC,GAAgB,GArCtDkC,GA6DA,SAASC,IAELC,sBAAsBD,GACtBtC,EAASwC,OAAOzC,EAAOD,GA/D3BwC,KAhBR,+BAoFQ,OACI,8BACI,qBAAKG,MAAO,CAACC,QAAQ,OAAOC,MAAM,QAASC,OAAO,SAAUC,IAAKjD,KAAKL,OAAQuD,IAAKC,EAAWC,IAAI,qBAtFlH,GAAoCC,aCKrBC,MARf,WACE,OACE,qBAAKC,UAAU,MAAf,SACC,cAAC,EAAD,OCDLC,IAASZ,OACP,cAAC,IAAMa,WAAP,UACE,cAAC,EAAD,MAEFtB,SAASuB,eAAe,W","file":"static/js/main.662978a4.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/GwangIcon.f9cd04a0.png\";","import React, { Component, createRef } from 'react';\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport {TrackballControls} from \"three/examples/jsm/controls/TrackballControls\";\nimport * as THREE from 'three';\nimport GwangIcon from '../media/img/GwangIcon.png';\n\nexport class RotatedGallery extends Component {\n    constructor(props) {\n        super()\n        this.state = {\n        }\n        this.imgRef = React.createRef();\n        this.videoRef= React.createRef();\n        this.canvasRef = React.createRef();\n    }\n    componentDidMount() {\n        let camera, scene, renderer;\n        let video= this.videoRef.current;\n        let canvas = this.canvasRef.current;\n        const texture = new THREE.Texture(this.imgRef.current);\n        console.log(texture);\n        init();\n        animate();\n        function init() {\n            camera = new THREE.PerspectiveCamera(60, window.innerWidth / window.innerHeight, 0.1, 100);\n            camera.position.z = 0.01;\n            scene = new THREE.Scene();\n            //video = document.getElementById('video');            \n            // const texture = new THREE.VideoTexture(video);\n            // const texture = new THREE.CanvasTexture(canvas);\n            const geometry = new THREE.PlaneBufferGeometry(16, 9);\n            //const geometry = new THREE.CylinderGeometry( 5, 5, 20, 32 );\n            geometry.scale(0.5, 0.5, 0.5);\n            console.log(texture);\n            const material = new THREE.MeshBasicMaterial({ map: texture });\n            const count = 11;\n            const radius = 10;\n            // const count = 16;\n            // const radius = 32;\n            for (let i = 1, l = count; i <= l; i++) {\n\n                const phi = Math.acos(- 1 + (2 * i) / l);\n                const theta = Math.sqrt(l * Math.PI) * phi;\n\n                const mesh = new THREE.Mesh(geometry, material);\n                // mesh.position.setFromSphericalCoords(radius, phi, theta);\n                mesh.position.setFromCylindricalCoords(radius, i*36, 0);\n                mesh.lookAt(camera.position);\n                scene.add(mesh);\n            }\n            renderer = new THREE.WebGLRenderer({ antialias: true });\n            renderer.setPixelRatio(window.devicePixelRatio);\n            renderer.setSize(window.innerWidth, window.innerHeight);\n            document.body.appendChild(renderer.domElement);\n            // const controls = new OrbitControls(camera, renderer.domElement);\n            // controls.enableZoom = false;\n            // controls.enablePan = false;\n            const controls = new TrackballControls(camera, renderer.domElement);\n            window.addEventListener('resize', onWindowResize, false);\n            // if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n            //     const constraints = { video: { width: 1280, height: 720, facingMode: 'user' } };\n            //     navigator.mediaDevices.getUserMedia(constraints).then(function (stream) {\n            //         // apply the stream to the video element used in the texture\n            //         video.srcObject = stream;\n            //         video.play();\n            //     }).catch(function (error) {\n            //         console.error('Unable to access the camera/webcam.', error);\n            //     });\n            // } else {\n            //     console.error('MediaDevices interface not available.');\n            // }\n        }\n\n        function onWindowResize() {\n\n            camera.aspect = window.innerWidth / window.innerHeight;\n            camera.updateProjectionMatrix();\n\n            renderer.setSize(window.innerWidth, window.innerHeight);\n\n        }\n\n        function animate() {\n\n            requestAnimationFrame(animate);\n            renderer.render(scene, camera);\n\n        }\n    }\n    render() {\n        return (\n            <div>\n                <img style={{display:\"none\",width:\"100px\", height:\"100px\"}} ref={this.imgRef} src={GwangIcon} alt=\"gwangicone\"/>\n                {/* <canvas ref={this.canvasRef} width=\"100\" height=\"100\" src={GwangIcon}>\n                    <img src={GwangIcon} width=\"100\" height=\"100\" alt=\"gwangicone\"/>\n                </canvas> \n                video id=\"video\" ref={this.videoRef} style={{display:\"none\"}} ></video> \n                style={{display:\"none\"}} */}\n            </div>\n        )\n    }\n}\n\nexport default RotatedGallery\n","import './App.css';\nimport RotatedGallery from './RotatedGallery';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n     <RotatedGallery></RotatedGallery>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}